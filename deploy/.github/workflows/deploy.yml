name: 🚀 Deploy Gold Trading Calculator to DigitalOcean VPS

on:
  push:
    branches: [ main ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
  pull_request:
    branches: [ main ]
  workflow_dispatch:  # Allow manual trigger

env:
  VPS_APP_DIR: C:\TradingCalculator
  SERVICE_NAME: GoldTradingCalculator

jobs:
  test:
    name: 🧪 Run Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      
    - name: 🐍 Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: 📦 Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: 🧪 Run Tests
      run: |
        python -m pytest tests/ -v || echo "⚠️ No tests found, skipping..."
        
    - name: 🔍 Code Quality Check
      run: |
        python -m flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics || echo "⚠️ Linting issues found"

  deploy:
    name: 🌊 Deploy to DigitalOcean VPS
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      
    - name: 🔐 Setup SSH Key
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.VPS_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H ${{ secrets.VPS_HOST }} >> ~/.ssh/known_hosts
        
    - name: 🚀 Deploy to VPS
      uses: appleboy/ssh-action@v0.1.7
      with:
        host: ${{ secrets.VPS_HOST }}
        username: ${{ secrets.VPS_USERNAME }}
        key: ${{ secrets.VPS_SSH_PRIVATE_KEY }}
        port: ${{ secrets.VPS_PORT }}
        timeout: 300s
        script: |
          echo "🚀 Starting deployment to DigitalOcean VPS..."
          
          # Navigate to application directory
          cd ${{ env.VPS_APP_DIR }}
          
          echo "📥 Pulling latest changes from GitHub..."
          git fetch origin
          git reset --hard origin/main
          
          echo "📦 Installing/updating Python dependencies..."
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          
          echo "� Stopping existing service..."
          net stop "${{ env.SERVICE_NAME }}" 2>nul || echo "Service not running"
          
          echo "⏳ Waiting for service to stop..."
          timeout /t 5 /nobreak
          
          echo "🔄 Starting service..."
          net start "${{ env.SERVICE_NAME }}"
          
          echo "⏳ Waiting for service to start..."
          timeout /t 10 /nobreak
          
          echo "✅ Deployment completed!"
          
    - name: 🏥 Health Check
      run: |
        echo "🏥 Performing post-deployment health check..."
        sleep 15
        
        # Test server health
        max_retries=5
        retry_count=0
        
        while [ $retry_count -lt $max_retries ]; do
          if curl -f -s "http://${{ secrets.VPS_HOST }}:8080/status" > /dev/null; then
            echo "✅ Health check passed!"
            echo "🌐 Application is running at: http://${{ secrets.VPS_HOST }}:8080"
            exit 0
          else
            retry_count=$((retry_count + 1))
            echo "⏳ Health check attempt $retry_count/$max_retries failed, retrying..."
            sleep 10
          fi
        done
        
        echo "❌ Health check failed after $max_retries attempts"
        echo "🔍 Please check the VPS manually"
        exit 1
        
    - name: 📊 Deployment Summary
      if: always()
      run: |
        echo "## 📊 Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "| Field | Value |" >> $GITHUB_STEP_SUMMARY
        echo "|-------|-------|" >> $GITHUB_STEP_SUMMARY
        echo "| 🌊 VPS Host | ${{ secrets.VPS_HOST }} |" >> $GITHUB_STEP_SUMMARY
        echo "| 📂 App Directory | ${{ env.VPS_APP_DIR }} |" >> $GITHUB_STEP_SUMMARY
        echo "| 🔧 Service Name | ${{ env.SERVICE_NAME }} |" >> $GITHUB_STEP_SUMMARY
        echo "| 🌐 Application URL | http://${{ secrets.VPS_HOST }}:8080 |" >> $GITHUB_STEP_SUMMARY
        echo "| ⏰ Deployed At | $(date -u) |" >> $GITHUB_STEP_SUMMARY
        echo "| 🔄 Commit SHA | ${{ github.sha }} |" >> $GITHUB_STEP_SUMMARY

  notify:
    name: 📢 Send Notification
    runs-on: ubuntu-latest
    needs: [test, deploy]
    if: always()
    
    steps:
    - name: 📢 Notify Success
      if: needs.deploy.result == 'success'
      run: |
        echo "✅ Deployment successful!"
        echo "🌐 Gold Trading Calculator is now live at: http://${{ secrets.VPS_HOST }}:8080"
        
    - name: 📢 Notify Failure
      if: needs.deploy.result == 'failure'
      run: |
        echo "❌ Deployment failed!"
        echo "� Please check the workflow logs for details"
